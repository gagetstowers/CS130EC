
import java.util.Scanner;
public class TicTacToe {
	
	public static final int NULL = '-';
    public static void printBoard(char[][] board) {
    	 int rows = board.length;
    	 int cols = board[0].length;
   	 
   	 for(int i = 0; i<rows; i++) {
   		 for(int j = 0; j<cols; j++) {
   			 System.out.print(board[i][j]+" ");
   		 }
   		 System.out.println();
   	 }
    }
    
    public static char [][] initBoard(char[][]board) {
   	 int rows= board.length;
   	 int cols = board[0].length;
   	 
   	 for(int i = 0; i<rows; i++) {
   		 for(int j=0; j<cols; j++) {
   			 board[i][j] = '-';
   		 }
   	 }
   	 return board;
    }
    
    public static boolean checkWinHorizontal; {
    checkWinHorizontal=false;	
    		
    }
    public static boolean checkWinVertical; {
    checkWinVertical=false;	
    	
    }
    public static boolean checkWinDiagonal; {
    checkWinDiagonal=false;	
    }
    
    
    
    public static void main(String[] args) {
   	 Scanner scnr = new Scanner(System.in);
   	 final int BOARD_SIZE=3;
   	 int playerTurn = 1;
   	 boolean gameOver= false;
   	 int userRow=0;
   	 int userCol = 0;
   	 char X = 'X';
   	 char O = 'O';
   	 
   	char [][] gameBoard= new char[BOARD_SIZE][BOARD_SIZE];
   	 
   	 gameBoard =initBoard(gameBoard);
   	 printBoard(gameBoard);
   	 
   	 while(gameOver==false) {
   		 while (playerTurn==1) {
   			 System.out.println("Player One, enter move location as: row(1-3) column(1-3).");
   			 userRow= scnr.nextInt() - 1;
   			 userCol = scnr.nextInt() - 1;
   			 break;
   		 }
   		 	 if (userRow >= 0 && userRow < BOARD_SIZE && userCol >= 0 && userCol < BOARD_SIZE && gameBoard[userRow][userCol]==NULL) {
   		 		 
   		 		(gameBoard[userRow][userCol])= X;  	 
   		 		 
   		 	printBoard(gameBoard);
   		 	 
   		
   		 	if (checkWinHorizontal==true) {
   		 		System.out.println("Player One is victorious! A thousand years of dishonor upon Player Two's family!");
   		 		gameOver=true;
   		 	}
   		 	if (checkWinVertical==true) {
		 		System.out.println("Player One is victorious! A thousand years of dishonor upon Player Two's family!");
		 		gameOver=true;
		 	}
   		 	if (checkWinDiagonal==true) {
		 		System.out.println("Player One is victorious! A thousand years of dishonor upon Player Two's family!");
		 		gameOver=true;
		 	}
   		 	
   		 	playerTurn = 2;
   		 	}
   		 
   	 
   		 while (playerTurn==2) {
   			 System.out.println("Player Two, enter move location as: row(1-3) column(1-3).");
   			 userRow = scnr.nextInt() - 1;
   			 userCol = scnr.nextInt() - 1;
   			 break;
   		 }
   		 	if (userRow >= 0 && userRow < BOARD_SIZE && userCol >= 0 && userCol < BOARD_SIZE && gameBoard[userRow][userCol]==NULL) {
		 		 
   		 		(gameBoard[userRow][userCol])= O;  	 
		 		 
   		 
   			 printBoard(gameBoard);
   		 	
   			 
   			if (checkWinHorizontal==true) {
   		 		System.out.println("Player Two is victorious! A thousand years of dishonor upon Player One's family!");
   		 		gameOver=true;
   		 	}
   		 	if (checkWinVertical==true) {
		 		System.out.println("Player Two is victorious! A thousand years of dishonor upon Player One's family!");
		 		gameOver=true;
		 	}
   		 	if (checkWinDiagonal==true) {
		 		System.out.println("Player Two is victorious! A thousand years of dishonor upon Player One's family!");
		 		gameOver=true;
		 	}
   		 	
   			 playerTurn = 1;
   			 
   		 
   		 	
   	 }	 
    }
}
}
